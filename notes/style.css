body {
    
    background-image: url('AhzNotesBackground.jpg');
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    height: 100vh;
    margin: 0;
    text-align: center;
    font-family: 'Radio Canada', sans-serif;
}

h1 {
    color: #f2f2f2;
    position: absolute;
}

.social {
    background-color: #23395600;
    position: absolute;
    bottom: 50px;
    left: 20px;
    width: 200px;           
    height: 25px;     
    display: flex;  
    color: #898989;
    font-family: 'Radio Canada', sans-serif;
    font-size: 16px;
    text-align: left;
    font-family: 'Radio Canada', sans-serif;    
    cursor: pointer;
    border: none;

}

.email {
    background-color: #23395600;
    position: absolute;
    bottom: 24px;
    left: 20px;
    width: 200px;           
    height: 25px;     
    display: flex;  
    color: #898989;
    font-family: 'Radio Canada', sans-serif;
    font-size: 16px;
    text-align: left;
    font-family: 'Radio Canada', sans-serif;    
    cursor: pointer;
    border: none;
}
.email:hover {
    color: #f9f9f9;
    transition: color 0.7s ease;
}
.social:hover {
    color: #f9f9f9;
    transition: color 0.7s ease;
}

body, html {
    height: 100%;
    margin: 0;
    display: flex;
    justify-content: center;
    align-items: center;
}

.noteLinkButton {
    transform-origin: center;
    font-family: 'Radio Canada', sans-serif;
    font-weight: 400;
    color: #f2f2f2;
    background-color: #23395693;
    width: 152px;           
    height: 96px;           
    text-align: center;
    border: none;
    border-radius: 20px;
    font-size: 21px;
    display:  flex;
    cursor: pointer;
    position: fixed;
    justify-content: center; 
    align-items: center;
    opacity: 0;
    transition: opacity 1s ease; 
    animation: fadeIn 1s ease-in-out forwards;
    
}

.noteLinkButton.visible {
    display: flex;
    opacity: 1;
}

@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

.ellipse-container {
    position: relative;
    width: 400px;       
    height: 200px;    
    margin: 0 auto;    
    display: flex;
    align-items: center;
    justify-content: center;
}

.noteLinkButton:nth-child(1) {
    transform: translate(clamp(-200px, -20vw, -160px), clamp(-500px, -14vh, -70px)); /* Top left */
}
.noteLinkButton:nth-child(2) {
    transform: translate(0, clamp(-800px, -20vh, -100px)); /* Top center */
}
.noteLinkButton:nth-child(3) {
    transform: translate(clamp(160px, 20vw, 200px), clamp(-500px, -14vh, -70px)); /* Top right */
}
.noteLinkButton:nth-child(4) {
    transform: translate(clamp(-200px, -20vw, -160px), clamp(70px, 14vh, 500px)); /* Bottom left */
}
.noteLinkButton:nth-child(5) {
    transform: translate(0, clamp(100px, 20vh, 800px)); /* Bottom center */
}
.noteLinkButton:nth-child(6) {
    transform: translate(clamp(160px, 20vw, 200px), clamp(70px, 14vh, 500px)); /* Bottom right */
}


.noteLinkButton.hoverable:hover {
    opacity: 1;
    border-radius: 32px;
    font-size: 24px; 
    width: 170px;       
    height: 115px;    
    background-color: #84B2BF; 
    transition: background-color 1s ease, height 0.3s ease, width 0.4s ease, border-radius 0.6s ease, font-size 0.4s ease-out;

}
  
.blur {
    filter: blur(4px);
    transition: filter 3s ease;
}

.noteLinkButton.hoverable {
    transition: background-color 1s ease, height 0.3s ease, width 0.4s ease, border-radius 0.6s ease, font-size 0.3s ease;
}

.email {
    transition: color 0.7s ease;
}

.social {
    transition: color 0.7s ease;
}

async function loadImages() {
    const sheetURL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vTWjRJYiNBSCZCOpUOdvrFxrQbMn8tDjEIi1Z99VhS_iaoKt5MdZL_UnLVSezhkNaJiQMTbr3ZBmW8O/pub?gid=0&single=true&output=csv";
    const corsProxy = "https://api.allorigins.win/get?url="; // Alternative CORS proxy URL
    try {
        const response = await fetch(corsProxy + encodeURIComponent(sheetURL));
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const json = await response.json();
        const data = json.contents;
        console.log("CSV Data:", data); // Log the raw CSV data

        const lines = data.split("\n");
        const imageURLs = lines.map(line => line.trim());
        console.log("Image URLs:", imageURLs); // Log the extracted image URLs

        const gallery = document.getElementById("gallery");
        imageURLs.forEach(url => {
            if (url) {
                console.log(`Loading image: ${url}`); // Debug log

                let imgWrapper = document.createElement("div");
                imgWrapper.className = "photo-container";

                // Image Element
                let imgElement = document.createElement("img");
                imgElement.src = url; // Use the direct URL to fetch the image
                imgElement.alt = "Photo";
                imgElement.loading = "lazy";
                imgElement.onerror = () => console.error(`Failed to load image: ${url}`); // Log error if image fails to load

                // Button to toggle dropdown visibility
                let button = document.createElement("button");
                button.className = "details-button";
                button.innerText = "View Details";
                button.onclick = () => toggleDropdown(button);

                // Dropdown for metadata
                let dropdown = document.createElement("div");
                dropdown.className = "photo-info-dropdown";
                dropdown.style.display = "none";  // Initially hidden

                // Add EXIF data to the dropdown (this will be extracted later)
                EXIF.getData(imgElement, function() {
                    let camera = EXIF.getTag(this, "Make") + " " + EXIF.getTag(this, "Model");
                    let exposure = EXIF.getTag(this, "ExposureTime");
                    let aperture = EXIF.getTag(this, "FNumber");
                    let iso = EXIF.getTag(this, "ISOSpeedRatings");
                    let date = EXIF.getTag(this, "DateTimeOriginal");

                    dropdown.innerHTML = `
                        <strong>Date: </strong> ${date}<br>
                        <strong>Camera: </strong> ${camera}<br>
                        <strong>Exposure: </strong> ${exposure}s<br>
                        <strong>F-Stop: </strong> f/${aperture}<br>
                        <strong>ISO: </strong> ${iso}
                    `;
                });

                // Append the image, button, and dropdown to the wrapper
                imgWrapper.appendChild(imgElement);
                imgWrapper.appendChild(button);
                imgWrapper.appendChild(dropdown);

                // Add the image wrapper to the gallery
                gallery.appendChild(imgWrapper);
            }
        });
    } catch (error) {
        console.error(`Failed to load images: ${error.message}`);
    }
}

// Define the toggleDropdown function
function toggleDropdown(button) {
    const dropdown = button.nextElementSibling;
    if (dropdown.style.display === "none") {
        dropdown.style.display = "block";
    } else {
        dropdown.style.display = "none";
    }
}

loadImages();